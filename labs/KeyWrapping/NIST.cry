module labs::KeyWrapping::NIST where

import specs::Primitive::Symmetric::Cipher::Block::AES128 as AES128
//import specs::Primitive::Symmetric::Cipher::Block::TripleDES as TDES

type BlockSize = 128
type SemiBlockSize = BlockSize / 2
type Block = [BlockSize]
type SemiBlock = [SemiBlockSize]
type KEKSize = 128



//
//
//
// type my_n = 3 // hand-coded for now

W128Step : [KEKSize] -> [64] -> (SemiBlock, [2]SemiBlock) -> (SemiBlock, [2]SemiBlock)
W128Step KEK t (A, Ris) = (A', Ris')
  where
    CIPH_K P = AES128::aesEncrypt (P, KEK)
    C_tmp    = CIPH_K ( A #  Ris@0 )
    MSB_64   = take`{64} C_tmp
    LSB_64   = drop`{64} C_tmp
    A'       = t ^ MSB_64
    Ris'     = (drop`{1} Ris) # [LSB_64]

W128 : [KEKSize] -> [3 * SemiBlockSize] -> [3 * SemiBlockSize] 
W128 KEK S = Cs
  where  
    Ss = split`{3} S
    A0 = Ss@0
    Rs = drop`{1} Ss

    States = [(A0, Rs)] # [ W128Step KEK t state | state <- States | t:[64] <- [1..12] ]
    C1  = (last States).0
    Cis = (last States).1
    Cs = C1 # (join Cis)
    
KW128 : [KEKSize] -> [2*SemiBlockSize] -> [3*SemiBlockSize]
KW128 KEK P = C
  where
    ICV1 = 0xA6A6A6A6A6A6A6A6
    S = ICV1 # P
    C = W128 KEK S

