module Salsa20Skeleton where

/**
 * Using all that you've learned, implement Salsa20 using this
 * skeleton code and the specification Salsa20.pdf. We've included
 * test vectors for each subroutine. For example, to test whether the
 * "quarterround" function is correct, run:
 * 
 * Cryptol> :prove quarterround_passes_tests
 */

quarterround : [4][32] -> [4][32]
quarterround [y0, y1, y2, y3] =
             [z0, z1, z2, z3]
  where 
    z0 = zero
    z1 = zero
    z2 = zero
    z3 = zero

rowround : [_][_] -> [_][_]
rowround [y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15] = 
         [z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11, z12, z13, z14, z15]
  where
    [z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11, z12, z13, z14, z15] = zero

columnround : [_][_] -> [_][_]
columnround [x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15] =
            [y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15]
  where
    [y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14, y15] = zero

littleendian : [_][_] -> [_]
littleendian input = zero

littleendian_inverse: [_] -> [_][_]
littleendian_inverse input = zero

doubleround : [_][_] -> [_][_]
doubleround xs = zero

Salsa20_hash : [_][_] -> [_][_]
Salsa20_hash xs = hs
  where
    hs = zero

Salsa20_expansion : {a} (a >= 1, 2 >= a) => ([_*a][_], [_][_]) -> [_][_]
Salsa20_expansion(k, n) = z
  where 
    z = zero

Salsa20_encrypt : {a, l} (a >= 1, 2 >= a, l <= 2^^70) => ([_*a][_], [_][_], [l][_]) -> [l][_]
Salsa20_encrypt(k, v, m) = c
  where
    c = zero




// Tests

property quarterround_passes_tests =
  (quarterround [0x00000000, 0x00000000, 0x00000000, 0x00000000] ==
                [0x00000000, 0x00000000, 0x00000000, 0x00000000]) &&
  (quarterround [0x00000001, 0x00000000, 0x00000000, 0x00000000] == 
                [0x08008145, 0x00000080, 0x00010200, 0x20500000]) &&
  (quarterround [0x00000000, 0x00000001, 0x00000000, 0x00000000] == 
                [0x88000100, 0x00000001, 0x00000200, 0x00402000]) &&
  (quarterround [0x00000000, 0x00000000, 0x00000001, 0x00000000] ==
                [0x80040000, 0x00000000, 0x00000001, 0x00002000]) &&
  (quarterround [0x00000000, 0x00000000, 0x00000000, 0x00000001] == 
                [0x00048044, 0x00000080, 0x00010000, 0x20100001]) &&
  (quarterround [0xe7e8c006, 0xc4f9417d, 0x6479b4b2, 0x68c67137] ==  
                [0xe876d72b, 0x9361dfd5, 0xf1460244, 0x948541a3]) &&
  (quarterround [0xd3917c5b, 0x55f1c407, 0x52a58a7a, 0x8f887a3b] == 
                [0x3e2f308c, 0xd90a8f36, 0x6ab2a923, 0x2883524c])

property rowround_passes_tests =
  (rowround [0x00000001, 0x00000000, 0x00000000, 0x00000000,
             0x00000001, 0x00000000, 0x00000000, 0x00000000,
             0x00000001, 0x00000000, 0x00000000, 0x00000000,
             0x00000001, 0x00000000, 0x00000000, 0x00000000] ==
            [0x08008145, 0x00000080, 0x00010200, 0x20500000,
             0x20100001, 0x00048044, 0x00000080, 0x00010000,
             0x00000001, 0x00002000, 0x80040000, 0x00000000,
             0x00000001, 0x00000200, 0x00402000, 0x88000100]) &&
  (rowround [0x08521bd6, 0x1fe88837, 0xbb2aa576, 0x3aa26365,
             0xc54c6a5b, 0x2fc74c2f, 0x6dd39cc3, 0xda0a64f6,
             0x90a2f23d, 0x067f95a6, 0x06b35f61, 0x41e4732e,
             0xe859c100, 0xea4d84b7, 0x0f619bff, 0xbc6e965a] ==
            [0xa890d39d, 0x65d71596, 0xe9487daa, 0xc8ca6a86,
             0x949d2192, 0x764b7754, 0xe408d9b9, 0x7a41b4d1,
             0x3402e183, 0x3c3af432, 0x50669f96, 0xd89ef0a8,
             0x0040ede5, 0xb545fbce, 0xd257ed4f, 0x1818882d])


property columnround_passes_tests =
  (columnround [0x00000001, 0x00000000, 0x00000000, 0x00000000,
                0x00000001, 0x00000000, 0x00000000, 0x00000000,
                0x00000001, 0x00000000, 0x00000000, 0x00000000,
                0x00000001, 0x00000000, 0x00000000, 0x00000000] ==
               [0x10090288, 0x00000000, 0x00000000, 0x00000000,
                0x00000101, 0x00000000, 0x00000000, 0x00000000,
                0x00020401, 0x00000000, 0x00000000, 0x00000000,
                0x40a04001, 0x00000000, 0x00000000, 0x00000000]) &&
  (columnround [0x08521bd6, 0x1fe88837, 0xbb2aa576, 0x3aa26365,
                0xc54c6a5b, 0x2fc74c2f, 0x6dd39cc3, 0xda0a64f6,
                0x90a2f23d, 0x067f95a6, 0x06b35f61, 0x41e4732e,
                0xe859c100, 0xea4d84b7, 0x0f619bff, 0xbc6e965a] ==
               [0x8c9d190a, 0xce8e4c90, 0x1ef8e9d3, 0x1326a71a,
                0x90a20123, 0xead3c4f3, 0x63a091a0, 0xf0708d69,
                0x789b010c, 0xd195a681, 0xeb7d5504, 0xa774135c,
                0x481c2027, 0x53a8e4b5, 0x4c1f89c5, 0x3f78c9c8])

property littleendian_passes_tests =
  (littleendian [0x00, 0x00, 0x00, 0x00] == 0x00000000) &&
  (littleendian [0x56, 0x4b, 0x1e, 0x09] == 0x091e4b56) &&
  (littleendian [0xff, 0xff, 0xff, 0xfa] == 0xfaffffff)

property littleendianinverse_passes_tests =
  (littleendian_inverse 0x00000000 == [0x00, 0x00, 0x00, 0x00]) &&
  (littleendian_inverse 0x091e4b56 == [0x56, 0x4b, 0x1e, 0x09]) &&
  (littleendian_inverse 0xfaffffff == [0xff, 0xff, 0xff, 0xfa])

property doubleround_passes_tests =
  (doubleround [0x00000001, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000,
                0x00000000, 0x00000000, 0x00000000, 0x00000000] ==
               [0x8186a22d, 0x0040a284, 0x82479210, 0x06929051,
                0x08000090, 0x02402200, 0x00004000, 0x00800000,
                0x00010200, 0x20400000, 0x08008104, 0x00000000,
                0x20500000, 0xa0000040, 0x0008180a, 0x612a8020]) &&
  (doubleround [0xde501066, 0x6f9eb8f7, 0xe4fbbd9b, 0x454e3f57,
                0xb75540d3, 0x43e93a4c, 0x3a6f2aa0, 0x726d6b36,
                0x9243f484, 0x9145d1e8, 0x4fa9d247, 0xdc8dee11,
                0x054bf545, 0x254dd653, 0xd9421b6d, 0x67b276c1] ==
               [0xccaaf672, 0x23d960f7, 0x9153e63a, 0xcd9a60d0,
                0x50440492, 0xf07cad19, 0xae344aa0, 0xdf4cfdfc,
                0xca531c29, 0x8e7943db, 0xac1680cd, 0xd503ca00,
                0xa74b2ad6, 0xbc331c5c, 0x1dda24c7, 0xee928277])

property Salsa20_hash_passes_tests =
  (Salsa20_hash
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00] ==
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]) &&
  (Salsa20_hash
    [0xd3, 0x9f, 0x0d, 0x73, 0x4c, 0x37, 0x52, 0xb7, 0x03, 0x75, 0xde,
     0x25, 0xbf, 0xbb, 0xea, 0x88, 0x31, 0xed, 0xb3, 0x30, 0x01, 0x6a,
     0xb2, 0xdb, 0xaf, 0xc7, 0xa6, 0x30, 0x56, 0x10, 0xb3, 0xcf, 0x1f,
     0xf0, 0x20, 0x3f, 0x0f, 0x53, 0x5d, 0xa1, 0x74, 0x93, 0x30, 0x71,
     0xee, 0x37, 0xcc, 0x24, 0x4f, 0xc9, 0xeb, 0x4f, 0x03, 0x51, 0x9c,
     0x2f, 0xcb, 0x1a, 0xf4, 0xf3, 0x58, 0x76, 0x68, 0x36] ==
    [0x6d, 0x2a, 0xb2, 0xa8, 0x9c, 0xf0, 0xf8, 0xee, 0xa8, 0xc4, 0xbe,
     0xcb, 0x1a, 0x6e, 0xaa, 0x9a, 0x1d, 0x1d, 0x96, 0x1a, 0x96, 0x1e,
     0xeb, 0xf9, 0xbe, 0xa3, 0xfb, 0x30, 0x45, 0x90, 0x33, 0x39, 0x76,
     0x28, 0x98, 0x9d, 0xb4, 0x39, 0x1b, 0x5e, 0x6b, 0x2a, 0xec, 0x23,
     0x1b, 0x6f, 0x72, 0x72, 0xdb, 0xec, 0xe8, 0x87, 0x6f, 0x9b, 0x6e,
     0x12, 0x18, 0xe8, 0x5f, 0x9e, 0xb3, 0x13, 0x30, 0xca]) &&
  (Salsa20_hash
    [0x58, 0x76, 0x68, 0x36, 0x4f, 0xc9, 0xeb, 0x4f, 0x03, 0x51, 0x9c,
     0x2f, 0xcb, 0x1a, 0xf4, 0xf3, 0xbf, 0xbb, 0xea, 0x88, 0xd3, 0x9f,
     0x0d, 0x73, 0x4c, 0x37, 0x52, 0xb7, 0x03, 0x75, 0xde, 0x25, 0x56,
     0x10, 0xb3, 0xcf, 0x31, 0xed, 0xb3, 0x30, 0x01, 0x6a, 0xb2, 0xdb,
     0xaf, 0xc7, 0xa6, 0x30, 0xee, 0x37, 0xcc, 0x24, 0x1f, 0xf0, 0x20,
     0x3f, 0x0f, 0x53, 0x5d, 0xa1, 0x74, 0x93, 0x30, 0x71] ==
    [0xb3, 0x13, 0x30, 0xca, 0xdb, 0xec, 0xe8, 0x87, 0x6f, 0x9b, 0x6e,
     0x12, 0x18, 0xe8, 0x5f, 0x9e, 0x1a, 0x6e, 0xaa, 0x9a, 0x6d, 0x2a,
     0xb2, 0xa8, 0x9c, 0xf0, 0xf8, 0xee, 0xa8, 0xc4, 0xbe, 0xcb, 0x45,
     0x90, 0x33, 0x39, 0x1d, 0x1d, 0x96, 0x1a, 0x96, 0x1e, 0xeb, 0xf9,
     0xbe, 0xa3, 0xfb, 0x30, 0x1b, 0x6f, 0x72, 0x72, 0x76, 0x28, 0x98,
     0x9d, 0xb4, 0x39, 0x1b, 0x5e, 0x6b, 0x2a, 0xec, 0x23])

property Salsa20_expansion_passes_tests =
  Salsa20_expansion (([1 .. 16] # [201 .. 216]):[_][8], [101 .. 116]:[_][8]) ==
    [0x45, 0x25, 0x44, 0x27, 0x29, 0x0f, 0x6b, 0xc1, 0xff, 0x8b, 0x7a,
     0x06, 0xaa, 0xe9, 0xd9, 0x62, 0x59, 0x90, 0xb6, 0x6a, 0x15, 0x33,
     0xc8, 0x41, 0xef, 0x31, 0xde, 0x22, 0xd7, 0x72, 0x28, 0x7e, 0x68,
     0xc5, 0x07, 0xe1, 0xc5, 0x99, 0x1f, 0x02, 0x66, 0x4e, 0x4c, 0xb0,
     0x54, 0xf5, 0xf6, 0xb8, 0xb1, 0xa0, 0x85, 0x82, 0x06, 0x48, 0x95,
     0x77, 0xc0, 0xc3, 0x84, 0xec, 0xea, 0x67, 0xf6, 0x4a] &&
  Salsa20_expansion ([1 .. 16]:[_][8], [101 .. 116]:[_][8]) ==
    [0x27, 0xad, 0x2e, 0xf8, 0x1e, 0xc8, 0x52, 0x11, 0x30, 0x43, 0xfe,
     0xef, 0x25, 0x12, 0x0d, 0xf7, 0xf1, 0xc8, 0x3d, 0x90, 0x0a, 0x37,
     0x32, 0xb9, 0x06, 0x2f, 0xf6, 0xfd, 0x8f, 0x56, 0xbb, 0xe1, 0x86,
     0x55, 0x6e, 0xf6, 0xa1, 0xa3, 0x2b, 0xeb, 0xe7, 0x5e, 0xab, 0x33,
     0x91, 0xd6, 0x70, 0x1d, 0x0e, 0xe8, 0x05, 0x10, 0x97, 0x8c, 0xb7,
     0x8d, 0xab, 0x09, 0x7a, 0xb5, 0x68, 0xb6, 0xb1, 0xc1]

property Salsa20_encrypt_passes_tests =
  (Salsa20_encrypt([1 .. 16]:[_][8], [101 .. 108]:[_][8], [201 .. 208]:[_][8]) ==
                   [0x03, 0x23, 0xcf, 0x7e, 0xba, 0x63, 0x67, 0x83]) &&
  (Salsa20_encrypt([1 .. 32]:[_][8], [101 .. 108]:[_][8], [201 .. 208]:[_][8]) ==
                   [0xe0, 0x7c, 0x59, 0x4d, 0x66, 0x61, 0x99, 0xe1])
