/* Simple Caesar cipher (ROT13) */
module Caesar where
  /** encrypts `msg` of length `n` */
  encrypt : {n} String n -> String n
  encrypt msg = [ mapped x | x <- msg ]
    where 
      mapping = ['A' .. 'Z'] <<< 13
      mapped c = 
        if (('A' <= c) && (c <= 'Z')) 
        then (mapping @ (c - 'A'))
        else c
  
  /** decrypts `msg` of length `n` */
  decrypt = encrypt

  /** example message */
  ex_msg = "ATTACK AT DAWN"
  /** example encryption */
  ex_msg' = encrypt ex_msg
  /** example decryption */
  ex_msg'' = decrypt ex_msg'
  /** Example message is recovered. */
  property example_recovery = ex_msg'' == ex_msg


  /** Decrypting encrypted `msg` of length `n` returns original `msg`. */
  recovery: {n} (fin n) => String n -> Bit
  recovery msg =
    decrypt (encrypt msg) == msg
  
  /** Decrypting encrypted `msg` of length `1` returns original `msg`. */
  property recovery_1 = recovery`{1}
  /** Decrypting encrypted `msg` of length `2` returns original `msg`. */
  property recovery_2 = recovery`{2}
  /** Decrypting encrypted `msg` of length `3` returns original `msg`. */
  property recovery_3 = recovery`{3}
  /** Decrypting encrypted `msg` of length `4` returns original `msg`. */
  property recovery_4 = recovery`{4}
